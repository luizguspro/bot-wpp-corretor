import logging
import json
import re
from datetime import datetime, timedelta
from services.ai_service import AIService
from services.property_service import PropertyService
from services.lead_scorer import LeadScorer
from services.urgency_creator import UrgencyCreator
from services.excuse_handler import ExcuseHandler

logger = logging.getLogger(__name__)

class MessageHandler:
    def __init__(self):
        self.ai_service = AIService()
        self.property_service = PropertyService()
        self.lead_scorer = LeadScorer()
        self.urgency_creator = UrgencyCreator()
        self.excuse_handler = ExcuseHandler()
        self.conversation_history = {}
        
    def process_message(self, text: str, from_number: str) -> str:
        """Processa mensagens com todas as features matadoras"""
        
        # Salva no hist√≥rico
        if from_number not in self.conversation_history:
            self.conversation_history[from_number] = []
        self.conversation_history[from_number].append({
            'text': text,
            'timestamp': datetime.now(),
            'from': 'user'
        })
        
        # 1. COMANDOS ESPECIAIS DO CORRETOR
        if text.startswith('#'):
            return self._handle_broker_commands(text, from_number)
        
        # 2. AN√ÅLISE DE LEAD EM TEMPO REAL
        lead_analysis = self.lead_scorer.analyze_lead(
            from_number, 
            self.conversation_history[from_number]
        )
        
        # 3. ALERTA SE CLIENTE QUENTE
        if lead_analysis['score'] >= 70:
            self._send_hot_lead_alert(from_number, lead_analysis)
        
        # 4. DETEC√á√ÉO DE PADR√ïES ESPECIAIS
        
        # S√≥ quer pre√ßo?
        if self._is_price_only_request(text):
            return self._handle_price_request(text, from_number)
        
        # Tem obje√ß√£o/desculpa?
        excuse_detected = self._detect_excuse(text)
        if excuse_detected:
            return self.excuse_handler.handle(excuse_detected, from_number)
        
        # Mencionou concorrente?
        competitor = self._detect_competitor(text)
        if competitor:
            return self._handle_competitor_mention(competitor, from_number)
        
        # Cliente sumiu e voltou?
        if self._is_returning_ghost(from_number):
            return self._handle_ghost_return(from_number)
        
        # 5. PROCESSAMENTO NORMAL COM IA
        intent_data = self.ai_service.classify_intent(text)
        
        # 6. RESPOSTAS INTELIGENTES BASEADAS NA INTEN√á√ÉO
        if intent_data.get('intent') == 'property_search':
            response = self._handle_property_search_smart(intent_data, from_number)
        elif intent_data.get('intent') == 'scheduling':
            response = self._handle_smart_scheduling(text, from_number)
        else:
            response = self.ai_service.generate_response(text)
        
        # 7. ADICIONA URG√äNCIA SE APROPRIADO
        if lead_analysis['score'] >= 50:
            urgency = self.urgency_creator.create_urgency(from_number)
            if urgency:
                response += f"\n\n{urgency}"
        
        # 8. SALVA RESPOSTA NO HIST√ìRICO
        self.conversation_history[from_number].append({
            'text': response,
            'timestamp': datetime.now(),
            'from': 'bot'
        })
        
        # 9. AGENDA FOLLOW-UP AUTOM√ÅTICO
        self._schedule_followup(from_number, lead_analysis)
        
        return response
    
    def _handle_broker_commands(self, command: str, from_number: str) -> str:
        """Comandos especiais para corretores"""
        
        parts = command.split()
        cmd = parts[0].lower()
        
        if cmd == '#status':
            # Mostra status do lead
            client_name = ' '.join(parts[1:]) if len(parts) > 1 else from_number
            analysis = self.lead_scorer.get_full_analysis(client_name)
            
            return f"""üìä STATUS DO LEAD: {client_name}

üî• Score: {analysis['score']}/100
üìà Classifica√ß√£o: {analysis['classification']}
üí° Pr√≥xima a√ß√£o: {analysis['next_action']}
‚è∞ Melhor hor√°rio contato: {analysis['best_contact_time']}
üì± √öltimo contato: {analysis['last_contact']}

SINAIS DETECTADOS:
{self._format_signals(analysis['signals'])}

RECOMENDA√á√ÉO: {analysis['recommendation']}"""
        
        elif cmd == '#comparar':
            # Compara im√≥veis
            properties = parts[1:]
            comparison = self.property_service.compare_properties(properties)
            return comparison
        
        elif cmd == '#fechar':
            # Script de fechamento
            client_name = ' '.join(parts[1:])
            script = self._generate_closing_script(client_name)
            return script
        
        elif cmd == '#urgencia':
            # Cria urg√™ncia
            property_code = parts[1] if len(parts) > 1 else 'AP001'
            urgency = self.urgency_creator.create_for_property(property_code)
            return urgency
        
        elif cmd == '#demo':
            # Modo demonstra√ß√£o
            return self._run_demo_mode()
        
        return "Comando n√£o reconhecido. Comandos dispon√≠veis: #status, #comparar, #fechar, #urgencia, #demo"
    
    def _is_price_only_request(self, text: str) -> bool:
        """Detecta se s√≥ quer saber pre√ßo"""
        price_patterns = [
            'quanto custa', 'qual o pre√ßo', 'qual valor',
            's√≥ quero saber o pre√ßo', 'me passa o valor',
            'quanto √©', 'quanto ta', 'valor?'
        ]
        text_lower = text.lower()
        return any(pattern in text_lower for pattern in price_patterns) and len(text) < 50
    
    def _handle_price_request(self, text: str, from_number: str) -> str:
        """Resposta inteligente para pedido de pre√ßo"""
        
        # Identifica o im√≥vel
        property_code = self._extract_property_code(text) or 'AP001'
        property_data = self.property_service.get_property(property_code)
        
        # Perfil do cliente
        profile = self._analyze_client_profile(from_number)
        
        if profile.get('first_time_buyer'):
            hook = f"""üí∞ R$ {property_data['preco']} - Mas espera! ü§ö

Esse valor INCLUI:
‚úÖ IPTU e condom√≠nio por 3 meses
‚úÖ Mudan√ßa gr√°tis  
‚úÖ Pintura de 1 c√¥modo

E o MELHOR: com R$ 15.000 voc√™ j√° consegue a entrada!
Parcelas de R$ 2.100 (menos que aluguel!)

üì± Quer saber como? Posso te ligar em 5 minutos?"""
        
        elif profile.get('investor'):
            hook = f"""üí∞ R$ {property_data['preco']} - Mas veja o RETORNO! üìà

‚Ä¢ Aluguel atual: R$ 2.800/m√™s
‚Ä¢ ROI: 7.4% ao ano (acima da poupan√ßa!)
‚Ä¢ Valoriza√ß√£o prevista: 15% em 2 anos
‚Ä¢ J√° tem inquilino interessado!

üìä Posso te enviar a planilha completa de retorno?"""
        
        else:
            hook = f"""üí∞ R$ {property_data['preco']} - E tem B√îNUS! üéÅ

APENAS ESSA SEMANA:
‚Ä¢ Cozinha planejada (valor R$ 15.000)
‚Ä¢ Ar condicionado nos quartos
‚Ä¢ 1 vaga extra de garagem

‚ö†Ô∏è J√° tem 3 propostas! N√£o quero que perca.

üì± Que tal uma visita virtual AGORA? Fa√ßo pelo WhatsApp!"""
        
        # Agenda follow-up autom√°tico
        self._schedule_followup(from_number, {'type': 'price_request', 'property': property_code})
        
        return hook
    
    def _detect_excuse(self, text: str) -> str:
        """Detecta desculpas comuns"""
        excuses = {
            'caro': ['muito caro', 'ta caro', 'fora do or√ßamento', 'n√£o tenho esse valor'],
            'pensar': ['preciso pensar', 'vou pensar', 'deixa eu ver', 'depois eu falo'],
            'outros': ['vou ver outros', 'to vendo outros', 'tem outros pra ver'],
            'conjuge': ['falar com esposa', 'falar com marido', 'conversar em casa'],
            'momento': ['n√£o √© o momento', 'agora n√£o', 'mais pra frente', 'ano que vem']
        }
        
        text_lower = text.lower()
        for excuse_type, patterns in excuses.items():
            for pattern in patterns:
                if pattern in text_lower:
                    return excuse_type
        return None
    
    def _detect_competitor(self, text: str) -> str:
        """Detecta men√ß√£o a concorrentes"""
        competitors = [
            'quintoandar', 'quinto andar', 'zap', 'olx', 
            'outra imobili√°ria', 'outro corretor', 'j√° estou vendo'
        ]
        text_lower = text.lower()
        for comp in competitors:
            if comp in text_lower:
                return comp
        return None
    
    def _handle_competitor_mention(self, competitor: str, from_number: str) -> str:
        """Resposta quando menciona concorrente"""
        
        responses = {
            'quintoandar': """Entendo que est√° vendo com o QuintoAndar! 

Mas sabia que conosco voc√™ tem:
‚úÖ ZERO taxa de servi√ßo (economia de R$ 2.400!)
‚úÖ Corretor dedicado 24/7 (n√£o rob√¥)
‚úÖ 40% mais op√ß√µes exclusivas
‚úÖ Negocia√ß√£o direta com propriet√°rio

üéÅ OFERTA: Se fechar conosco hoje, primeira mensalidade GR√ÅTIS!

Posso te mostrar op√ß√µes melhores e mais baratas agora?""",
            
            'default': """Legal que est√° pesquisando! üòä

Adoraria mostrar nossos DIFERENCIAIS:
‚úÖ Im√≥veis exclusivos (n√£o est√£o em outros lugares)
‚úÖ Condi√ß√µes especiais de pagamento
‚úÖ Tour virtual 360¬∞ de todos
‚úÖ Garantia de satisfa√ß√£o

üéÅ Como voc√™ j√° est√° procurando, tenho uma condi√ß√£o ESPECIAL.

Posso te apresentar 3 op√ß√µes premium que acabaram de chegar?"""
        }
        
        # Alerta para corretor
        self._send_competitor_alert(from_number, competitor)
        
        return responses.get(competitor, responses['default'])
    
    def _is_returning_ghost(self, from_number: str) -> bool:
        """Verifica se √© cliente que sumiu e voltou"""
        history = self.conversation_history.get(from_number, [])
        if len(history) < 2:
            return False
        
        # Pega √∫ltima intera√ß√£o
        last_interaction = history[-2]['timestamp']
        time_away = datetime.now() - last_interaction
        
        return time_away.total_seconds() > 86400  # Mais de 24h
    
    def _handle_ghost_return(self, from_number: str) -> str:
        """Mensagem para quem sumiu e voltou"""
        
        templates = [
            """Que bom que voltou! üòä

Tenho NOVIDADES sobre o que voc√™ procura:
üè† 3 im√≥veis novos na sua faixa de pre√ßo
üí∞ Condi√ß√£o especial esse m√™s
üì∏ Tours virtuais dispon√≠veis

O que achou mais importante na sua busca?""",

            """Oi! Estava esperando voc√™! üéØ

Lembra do im√≥vel que voc√™ gostou? 
Consegui uma condi√ß√£o ESPECIAL:
‚úÖ Entrada facilitada em 10x
‚úÖ Desconto de 5% √† vista
‚úÖ IPTU 2024 gr√°tis

Ainda est√° interessado?""",

            """Ol√° novamente! üòä

Separei algumas op√ß√µes MELHORES desde nossa √∫ltima conversa:
üìç 2 lan√ßamentos na regi√£o que voc√™ queria
üíé 1 oportunidade √∫nica (propriet√°rio com urg√™ncia)

Quer ver? Garanto que vai gostar!"""
        ]
        
        import random
        return random.choice(templates)
    
    def _handle_property_search_smart(self, intent_data: dict, from_number: str) -> str:
        """Busca inteligente com lead scoring"""
        
        # Busca normal
        properties = self.property_service.search_properties(intent_data.get('parameters', {}))
        
        # Adiciona intelig√™ncia
        lead_score = self.lead_scorer.get_score(from_number)
        
        if lead_score >= 70:
            # Cliente quente - adiciona urg√™ncia
            properties += "\n\nüî• ATEN√á√ÉO: Estes im√≥veis est√£o com alta procura! Sugiro agendarmos visita ainda hoje."
        elif lead_score >= 50:
            # Cliente morno - adiciona benef√≠cio
            properties += "\n\nüéÅ BENEF√çCIO EXCLUSIVO: Identificamos que voc√™ √© um cliente especial. Tenho condi√ß√µes diferenciadas!"
        
        return properties
    
    def _handle_smart_scheduling(self, text: str, from_number: str) -> str:
        """Agendamento inteligente com confirma√ß√£o"""
        
        response = """üìÖ Perfeito! Vamos agendar sua visita!

Tenho estes hor√°rios HOJE:
üïê 14:00 - Dispon√≠vel ‚úÖ
üïë 16:00 - Dispon√≠vel ‚úÖ  
üïí 18:00 - Dispon√≠vel ‚úÖ

Qual prefere? 

üí° Dica: Quem confirma agora ganha:
‚Ä¢ Relat√≥rio completo do bairro
‚Ä¢ An√°lise de valoriza√ß√£o
‚Ä¢ Caf√©zinho na visita ‚òï"""
        
        # Agenda confirma√ß√µes autom√°ticas
        self._schedule_visit_confirmations(from_number)
        
        return response
    
    def _send_hot_lead_alert(self, from_number: str, analysis: dict) -> None:
        """Envia alerta de lead quente para corretor"""
        alert = f"""
üî•üî•üî• LEAD QUENTE DETECTADO! üî•üî•üî•

Cliente: {from_number}
Score: {analysis['score']}/100
Sinais: {', '.join(analysis['signals'][:3])}

A√á√ÉO RECOMENDADA: {analysis['action']}
Probabilidade de fechar: {analysis['close_probability']}

üì± LIGAR AGORA! Script dispon√≠vel no sistema.
"""
        logger.info(alert)
        # Aqui voc√™ pode integrar com Slack, SMS, etc.
    
    def _send_competitor_alert(self, from_number: str, competitor: str) -> None:
        """Alerta quando cliente menciona concorrente"""
        alert = f"""
‚ö†Ô∏è ALERTA: CONCORRENTE MENCIONADO!

Cliente: {from_number}
Concorrente: {competitor}
A√ß√£o: LIGAR EM 5 MINUTOS!

Use o script anti-concorr√™ncia #3
"""
        logger.info(alert)
    
    def _schedule_followup(self, from_number: str, context: dict) -> None:
        """Agenda follow-up autom√°tico"""
        # Aqui voc√™ integraria com seu sistema de agendamento
        logger.info(f"Follow-up agendado para {from_number}: {context}")
    
    def _schedule_visit_confirmations(self, from_number: str) -> None:
        """Agenda confirma√ß√µes de visita"""
        # Sistema de confirma√ß√£o em 3 etapas
        confirmations = [
            (timedelta(hours=1), "Visita confirmada! Salvou no calend√°rio?"),
            (timedelta(days=1), "Oi! Confirma nossa visita amanh√£?"),
            (timedelta(hours=2), "Nos vemos em 2 horas! üìç Endere√ßo: ...")
        ]
        logger.info(f"Confirma√ß√µes agendadas para {from_number}")
    
    def _extract_property_code(self, text: str) -> str:
        """Extrai c√≥digo do im√≥vel do texto"""
        pattern = r'\b(AP|CA)\d{3,4}\b'
        matches = re.findall(pattern, text.upper())
        return matches[0] if matches else None
    
    def _analyze_client_profile(self, from_number: str) -> dict:
        """Analisa perfil do cliente"""
        # An√°lise baseada no hist√≥rico
        history = self.conversation_history.get(from_number, [])
        
        profile = {
            'first_time_buyer': any('primeiro' in str(m).lower() or 'primeira vez' in str(m).lower() for m in history),
            'investor': any('invest' in str(m).lower() or 'renda' in str(m).lower() for m in history),
            'family': any('fam√≠lia' in str(m).lower() or 'filhos' in str(m).lower() for m in history),
            'urgent': any('urgent' in str(m).lower() or 'r√°pido' in str(m).lower() for m in history)
        }
        
        return profile
    
    def _format_signals(self, signals: list) -> str:
        """Formata sinais detectados"""
        return '\n'.join([f"‚Ä¢ {signal}" for signal in signals])
    
    def _generate_closing_script(self, client_name: str) -> str:
        """Gera script de fechamento personalizado"""
        return f"""üìù SCRIPT DE FECHAMENTO - {client_name}

ABERTURA:
"{client_name}, analisando tudo que conversamos, o AP001 √© PERFEITO para voc√™ porque..."

BENEF√çCIOS PRINCIPAIS:
‚úÖ Est√° dentro do seu or√ßamento
‚úÖ Tem os 3 quartos que precisa
‚úÖ Localiza√ß√£o que voc√™ pediu

CRIA√á√ÉO DE URG√äNCIA:
"Preciso ser transparente: recebi 2 consultas sobre esse im√≥vel hoje..."

FECHAMENTO:
"O que precisamos resolver para voc√™ pegar as chaves do SEU novo lar?"

TRATAMENTO DE OBJE√á√ïES:
üí∞ Pre√ßo: "Veja, o aluguel aqui √© R$ 2.500. A parcela fica em R$ 2.300..."
ü§î Pensar: "Claro! Mas deixa eu reservar 24h no seu nome..."
üë• C√¥njuge: "Perfeito! Vamos fazer uma chamada de v√≠deo agora?"

BOA SORTE! üçÄ"""
    
    def _run_demo_mode(self) -> str:
        """Executa demonstra√ß√£o ao vivo"""
        return """üé≠ MODO DEMONSTRA√á√ÉO ATIVADO!

Vou simular uma conversa completa mostrando todas as features:

1Ô∏è‚É£ CLIENTE: "Oi, quanto custa o AP001?"
   BOT: [Resposta com gancho al√©m do pre√ßo]

2Ô∏è‚É£ CLIENTE: "T√° caro, preciso pensar"
   BOT: [Convers√£o de obje√ß√£o]
   SISTEMA: [Alerta de obje√ß√£o para corretor]

3Ô∏è‚É£ CLIENTE: "T√¥ vendo com a QuintoAndar tamb√©m"
   BOT: [Contra-ataque √† concorr√™ncia]
   SISTEMA: [üî• ALERTA URGENTE]

4Ô∏è‚É£ CLIENTE: "Ok, quero visitar"
   BOT: [Agendamento com confirma√ß√£o tripla]
   SISTEMA: [Lead marcado como QUENTE - 85/100]

Impressionante, n√©? üòé"""
